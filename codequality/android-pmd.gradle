configurations {
    codequality
}

repositories {
    mavenCentral()
}

dependencies {
    codequality 'net.sourceforge.pmd:pmd:5.0.1'
}

task pmd(type: AndroidPmdTask) {
    ignoreFailures true
    showViolations false
    // force running of task, regardless of whether it's upToDate
    outputs.upToDateWhen { false }
}

check.dependsOn(pmd)

///////////////////////////////////////////////
////////////// Groovy Task Class //////////////
///////////////////////////////////////////////
import org.gradle.api.internal.project.IsolatedAntBuilder

/**
 * See parameters at http://pmd.sourceforge.net/pmd-4.2.6/ant-task.html
 */
class AndroidPmdTask extends DefaultTask {
    @InputFile
    @Optional
    File rulesetFile = new File("$project.rootDir/codequality/pmd-rules/ruleset.xml")
    @InputFile
    @Optional
    File xslFile = new File("$project.rootDir/codequality/pmd-rules/pmd-nicerhtml.xsl")
    @OutputFile
    @Optional
    File outputFile = new File("$project.buildDir/reports/pmd/pmd-${project.name}.xml")
    FileCollection pmdClasspath = project.configurations.codequality
    Boolean ignoreFailures = false
    Boolean showViolations = true
    Project gradleProject = project

    def AndroidPmdTask() {
        description = 'Runs PMD against Android sourcesets.'
        group = 'Code Quality'
    }

    @TaskAction
    def runPmd() {
        outputFile.parentFile.mkdirs()
        def antBuilder = services.get(IsolatedAntBuilder)
        antBuilder.withClasspath(pmdClasspath).execute {
            ant.taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask')

            def ignoredModules = ["ImageLoader20"]

            ant.pmd(shortFilenames: 'true',
                    failonruleviolation: !ignoreFailures,
                    rulesetfiles: rulesetFile.toURI().toString()) {
                formatter(type: 'xml', toFile: outputFile, toConsole: showViolations)
                gradleProject.subprojects.each { submodule ->
                    if (!submodule.plugins.hasPlugin("com.android.application") && !submodule.plugins.hasPlugin("com.android.library")) {
                        return;
                    }
                    if (ignoredModules.contains(submodule.name)) {
                        return
                    }

                    submodule.android.sourceSets.each { sourceSet ->
                        sourceSet.java.each { file ->
                            file.getSrcDirs().each {
                                if (it.exists()) {
                                    fileset(dir: it)
                                }
                            }
                        }
                    }
                }
            }
            ant.xslt(in: outputFile,
                    style: xslFile,
                    out: outputFile.absolutePath.replaceFirst(~/\.[^\.]+$/, ".html"))
        }
    }
}
